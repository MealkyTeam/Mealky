apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'io.fabric'

buildscript {
    repositories {
        google()
        maven { url 'https://maven.google.com' }
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'org.jacoco:org.jacoco.core:0.8.3'
        classpath 'io.fabric.tools:gradle:1.28.1'
    }
}

android {
    kapt {
        generateStubs = true
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.teammealky.mealky"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("$rootDir/config/signing/release/release.jks")
            storePassword System.getenv("MEALKY_KEYSTORE_PASSWORD")
            keyAlias System.getenv("MEALKY_KEY_ALIAS")
            keyPassword System.getenv("MEALKY_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            buildConfigField "String", "CENTRAL_URL", rootProject.ext.api.release.central
            buildConfigField "String", "CENTRAL_LOGIN", rootProject.ext.api.release.login
            buildConfigField "String", "CENTRAL_PASSWORD", rootProject.ext.api.release.password
            resValue "string", "fileProviderAuthorities", rootProject.ext.api.release.fileProviderAuthorities

            ext.betaDistributionGroupAliases = 'Team, family-and-friends'
            ext.betaDistributionNotifications = false
            ext.betaDistributionReleaseNotesFilePath = 'config/release-notes.txt'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }

        debug {
            testCoverageEnabled true
            ext.betaDistributionGroupAliases = 'Family and friends'
            ext.betaDistributionGroupAliases = 'Team'
            buildConfigField "String", "CENTRAL_URL", rootProject.ext.api.release.central
            buildConfigField "String", "CENTRAL_LOGIN", rootProject.ext.api.release.login
            buildConfigField "String", "CENTRAL_PASSWORD", rootProject.ext.api.release.password
            resValue "string", "fileProviderAuthorities", rootProject.ext.api.release.fileProviderAuthorities

        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
        testOptions.unitTests.includeAndroidResources = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'com.google.android.material:material:1.1.0-alpha06'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.2'

    implementation 'com.google.android:flexbox:1.1.0'
    implementation 'com.mindorks.android:placeholderview:1.0.3'
    kapt 'com.mindorks.android:placeholderview-compiler:1.0.3'
    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.1'
    implementation "io.reactivex.rxjava2:rxjava:2.2.6"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation "com.karumi:dexter:5.0.0"
    implementation 'com.github.jkwiecien:EasyImage:3.0.1'

    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.google.dagger:dagger-android:2.15'
    implementation 'com.google.dagger:dagger-android-support:2.13'
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.16'
    implementation 'com.google.dagger:dagger:2.17'
    kapt 'com.google.dagger:dagger-compiler:2.13'
    compileOnly 'javax.annotation:jsr250-api:1.0'

    testImplementation 'androidx.test:runner:1.1.1'
    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'junit:junit:4.12'
    implementation "io.mockk:mockk-common:1.8.13.kotlin13"
    testImplementation "io.mockk:mockk:1.8.13.kotlin13"

    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
        transitive = true
    }
}

androidExtensions {
    experimental = true
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true

    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "short"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    description = "Generate Jacoco coverage reports for Debug build"
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

jacoco {
    toolVersion = '0.8.3'
    reportsDir = file("$buildDir/reports")
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}